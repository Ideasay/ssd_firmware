#ifndef MEMORY_MAP_H_
#define MEMORY_MAP_H_

#include "data_buffer.h"
#include "address_translation.h"
#include "request_allocation.h"
#include "request_schedule.h"
#include "request_transform.h"
#include "garbage_collection.h"
#include "xparameters.h"

#define DRAM_START_ADDR					XPAR_DDR4_0_BASEADDR + 0x00100000//XPAR_MIG_0_BASEADDR //xparameters

/***********************
 * ourNVMe Segement begin
 * ******************/
#define MEM_PAGE_WIDTH                  (0xc)  //better to get the value from hardware
#define LBA_SIZE 				        (0x1000)
//#define XDMA_CROSSBAR_ADDR              (0x0000000100000000)
// XDMA internal registers base address, XPAR_NVME_CONTROLLER_1004_0_BASEADDR
#define XDMA_REG_BASEADDR  				(0x00040000)
// PL-side user registers base address, XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR
#define USER_REG_BASEADDR  				(0x00020000)
// PL-side SQ-entry buffer base address, XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR
#define PL_SQ_ENTRY_BUF_BASEADDR		(0x00030000)

// PL-side SQ-entry buffer size(number of SQ entries)
#define PL_SQ_ENTRY_NUM 				(8)
// PL-side CQ-entry buffer base address, XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR
#define PL_CQ_ENTRY_BUF_BASEADDR		(0x00030000)
// PL-side CQ-entry buffer size(number of CQ entries)
#define PL_CQ_ENTRY_NUM					(8)

// PL-side SQ-data buffer base address, XPAR_AXI_BRAM_CTRL_2_S_AXI_BASEADDR
#define PL_SQ_DATA_BUF_BASEADDR			(DRAM_START_ADDR+0x1000)
// PL-side SQ-data buffer size(byte)
#define PL_SQ_DATA_BUF_SIZE				(4096)

// PL-side CQ-data buffer base address, XPAR_AXI_BRAM_CTRL_2_S_AXI_BASEADDR
#define PL_CQ_DATA_BUF_BASEADDR			(PL_SQ_DATA_BUF_BASEADDR+0x1000)
// PL-side CQ-data buffer size(byte)
#define PL_CQ_DATA_BUF_SIZE				(4096)

#define PL_IO_READ_BUF_BASEADDR			(PL_CQ_DATA_BUF_BASEADDR+0x2000)
#define PL_IO_WRITE_BUF_BASEADDR	    (PL_IO_READ_BUF_BASEADDR+0x2000)
#define PL_IO_PRP_BUF_BASEADDR	        (PL_IO_WRITE_BUF_BASEADDR+0x4000)
#define PL_IO_END                       (PL_IO_PRP_BUF_BASEADDR+0x2000)
/***********************
 * ourNVMe Segement end
 * ******************/

#define MEMORY_SEGMENTS_START_ADDR		PL_IO_END
#define MEMORY_SEGMENTS_END_ADDR		PL_IO_END + 0x000FFFFF

#define NVME_MANAGEMENT_START_ADDR		MEMORY_SEGMENTS_END_ADDR + 0x00000001
#define NVME_MANAGEMENT_END_ADDR		NVME_MANAGEMENT_START_ADDR+ 0x000FFFFF

#define RESERVED0_START_ADDR			NVME_MANAGEMENT_END_ADDR + 0x00000001
#define RESERVED0_END_ADDR				RESERVED0_START_ADDR + 0x0FCFFFFF
 
#define FTL_MANAGEMENT_START_ADDR		RESERVED0_END_ADDR + 0x00000001


// Uncached & Unbuffered
//for data buffer
//here data buffer addr should be consistent with PRP_BUF_BASEADDR. to do
#define DATA_BUFFER_BASE_ADDR 					FTL_MANAGEMENT_START_ADDR
#define TEMPORARY_DATA_BUFFER_BASE_ADDR			(DATA_BUFFER_BASE_ADDR + AVAILABLE_DATA_BUFFER_ENTRY_COUNT * BYTES_PER_DATA_REGION_OF_SLICE)
#define SPARE_DATA_BUFFER_BASE_ADDR				(TEMPORARY_DATA_BUFFER_BASE_ADDR + AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT * BYTES_PER_DATA_REGION_OF_SLICE)
#define TEMPORARY_SPARE_DATA_BUFFER_BASE_ADDR	(SPARE_DATA_BUFFER_BASE_ADDR + AVAILABLE_DATA_BUFFER_ENTRY_COUNT * BYTES_PER_SPARE_REGION_OF_SLICE)
#define RESERVED_DATA_BUFFER_BASE_ADDR 			(TEMPORARY_SPARE_DATA_BUFFER_BASE_ADDR + AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT * BYTES_PER_SPARE_REGION_OF_SLICE)
//for nand request completion
#define COMPLETE_FLAG_TABLE_ADDR			FTL_MANAGEMENT_START_ADDR + 0x07000000
#define STATUS_REPORT_TABLE_ADDR			(COMPLETE_FLAG_TABLE_ADDR + sizeof(COMPLETE_FLAG_TABLE))
#define ERROR_INFO_TABLE_ADDR				(STATUS_REPORT_TABLE_ADDR + sizeof(STATUS_REPORT_TABLE))
#define TEMPORARY_PAY_LOAD_ADDR				(ERROR_INFO_TABLE_ADDR+ sizeof(ERROR_INFO_TABLE))
// cached & buffered
// for buffers
#define DATA_BUFFER_MAP_ADDR		 		FTL_MANAGEMENT_START_ADDR + 0x08000000
#define DATA_BUFFFER_HASH_TABLE_ADDR		(DATA_BUFFER_MAP_ADDR + sizeof(DATA_BUF_MAP))
#define TEMPORARY_DATA_BUFFER_MAP_ADDR 		(DATA_BUFFFER_HASH_TABLE_ADDR + sizeof(DATA_BUF_HASH_TABLE))
// for map tables
#define LOGICAL_SLICE_MAP_ADDR				(TEMPORARY_DATA_BUFFER_MAP_ADDR + sizeof(TEMPORARY_DATA_BUF_MAP))
#define VIRTUAL_SLICE_MAP_ADDR				(LOGICAL_SLICE_MAP_ADDR + sizeof(LOGICAL_SLICE_MAP))
#define VIRTUAL_BLOCK_MAP_ADDR				(VIRTUAL_SLICE_MAP_ADDR + sizeof(VIRTUAL_SLICE_MAP))
#define PHY_BLOCK_MAP_ADDR					(VIRTUAL_BLOCK_MAP_ADDR + sizeof(VIRTUAL_BLOCK_MAP))
#define BAD_BLOCK_TABLE_INFO_MAP_ADDR		(PHY_BLOCK_MAP_ADDR + sizeof(PHY_BLOCK_MAP))
#define VIRTUAL_DIE_MAP_ADDR				(BAD_BLOCK_TABLE_INFO_MAP_ADDR + sizeof(BAD_BLOCK_TABLE_INFO_MAP))
// for GC victim selection
#define GC_VICTIM_MAP_ADDR					(VIRTUAL_DIE_MAP_ADDR + sizeof(VIRTUAL_DIE_MAP))
// for request pool
#define REQ_POOL_ADDR						(GC_VICTIM_MAP_ADDR + sizeof(GC_VICTIM_MAP))
// for dependency table
#define ROW_ADDR_DEPENDENCY_TABLE_ADDR		(REQ_POOL_ADDR + sizeof(REQ_POOL))
// for request scheduler
#define DIE_STATE_TABLE_ADDR				(ROW_ADDR_DEPENDENCY_TABLE_ADDR + sizeof(ROW_ADDR_DEPENDENCY_TABLE))
#define RETRY_LIMIT_TABLE_ADDR				(DIE_STATE_TABLE_ADDR + sizeof(DIE_STATE_TABLE))
#define WAY_PRIORITY_TABLE_ADDR 			(RETRY_LIMIT_TABLE_ADDR + sizeof(RETRY_LIMIT_TABLE))

#define FTL_MANAGEMENT_END_ADDR				((WAY_PRIORITY_TABLE_ADDR + sizeof(WAY_PRIORITY_TABLE))- 1)

/****** nvme segment for simulation
#define NVME_REQ_SIM_ADDR                   (FTL_MANAGEMENT_END_ADDR + 1)

#define NVME_DATA_SIM_ADDR				    (NVME_REQ_SIM_ADDR + 10*sizeof(NVME_COMMAND))
*******/
#define RESERVED1_START_ADDR                (NVME_DATA_SIM_ADDR + 10*BYTES_PER_DATA_REGION_OF_SLICE)

#define RESERVED1_END_ADDR					XPAR_MIG_0_HIGHADDR
#define DRAM_END_ADDR						XPAR_MIG_0_HIGHADDR

#endif /* MEMORY_MAP_H_ */
